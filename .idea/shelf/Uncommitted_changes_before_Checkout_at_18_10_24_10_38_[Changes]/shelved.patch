Index: app/src/main/java/com/example/autoalert/viewmodel/SpeedViewModel.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.autoalert.viewmodel;\n\n\nimport android.app.Activity;\nimport android.app.AlertDialog;\nimport android.content.Intent;\nimport android.location.Geocoder;\nimport android.location.Address;\nimport java.io.IOException;\nimport java.util.List;\nimport java.util.Locale;\n\nimport com.example.autoalert.utils.AddressFetcher;\nimport com.example.autoalert.utils.DetectorAccidente;\nimport com.example.autoalert.utils.KalmanFilter;\n\n\nimport android.Manifest;\nimport android.app.Application;\nimport android.content.Context;\nimport android.content.pm.PackageManager;\nimport android.location.Location;\nimport android.location.LocationListener;\nimport android.location.LocationManager;\nimport android.os.Bundle;\nimport android.provider.Settings;\nimport android.util.Log;\nimport android.widget.Toast;\n\nimport androidx.annotation.NonNull;\nimport androidx.core.app.ActivityCompat;\nimport androidx.lifecycle.AndroidViewModel;\nimport androidx.lifecycle.LiveData;\nimport androidx.lifecycle.MutableLiveData;\n\n//import com.example.autoalert.repository.SensorQueueRepository;\nimport com.example.autoalert.model.entities.DatosMovimiento;\nimport com.example.autoalert.repository.AccelerationDataWriter;\nimport com.example.autoalert.repository.AccelerationQueueRepository;\nimport com.example.autoalert.repository.CoordinateQueue;\nimport com.example.autoalert.repository.DetectorAccidenteDataWriter;\nimport com.example.autoalert.repository.SpeedQueueRepository;\nimport com.example.autoalert.view.activities.MainActivity;\nimport com.google.android.gms.common.api.ResolvableApiException;\nimport com.google.android.gms.location.LocationRequest;\nimport com.google.android.gms.location.LocationServices;\nimport com.google.android.gms.location.LocationSettingsRequest;\nimport com.google.android.gms.location.LocationSettingsResponse;\nimport com.google.android.gms.location.Priority;\nimport com.google.android.gms.tasks.Task;\n\npublic class SpeedViewModel extends AndroidViewModel {\n\n    private static final int REQUEST_LOCATION_PERMISSION = 1001;\n    public static final int REQUEST_CHECK_SETTINGS = 1002;\n    private static int MAX_SIZE_COORD = 3;\n    private static int UMBRAL_MIN_VEL=5;\n\n    private MutableLiveData<Double> speedKmh = new MutableLiveData<>();\n    private MutableLiveData<Location> location = new MutableLiveData<>();\n    private MutableLiveData<Boolean> locationPermissionState = new MutableLiveData<>();\n    private MutableLiveData<String> address = new MutableLiveData<>();\n\n    private LocationManager locationManager;\n    private LocationListener locationListener;\n    private SpeedQueueRepository sensorData;\n    private AccelerationQueueRepository accelerationQueueRepository;\n    private long lastSpeedUpdate = 0;\n    private boolean isFirstMeasurement = true;\n    private float previousSpeed;\n    private long previousTime;\n    private double previousLatitude;\n    private double previousLongitude;\n    private boolean isFirstCoordinate = true;\n\n    private boolean deteccionIniciada = false;\n\n\n    private final CoordinateQueue coordinateQueue = new CoordinateQueue();\n    private DetectorAccidente accidente;\n    private AddressFetcher addressFetcher;\n\n    private final MutableLiveData<Boolean> locationEnabled = new MutableLiveData<>();\n\n\n    private static final long UPDATE_INTERVAL_MS = 1000;\n\n    public SpeedViewModel(@NonNull Application application) {\n        super(application);\n        locationManager = (LocationManager) application.getSystemService(Context.LOCATION_SERVICE);\n\n        sensorData = new SpeedQueueRepository(application.getApplicationContext());\n        accelerationQueueRepository = new AccelerationQueueRepository(application.getApplicationContext());\n\n        accidente = new DetectorAccidente(getApplication().getApplicationContext());\n\n        addressFetcher = new AddressFetcher(getApplication().getApplicationContext());\n\n\n        locationListener = new LocationListener() {\n            @Override\n            public void onLocationChanged(@NonNull Location location) {\n                updateLocation(location);\n            }\n\n            @Override\n            public void onStatusChanged(String provider, int status, Bundle extras) {\n            }\n\n            @Override\n            public void onProviderEnabled(@NonNull String provider) {\n            }\n\n            @Override\n            public void onProviderDisabled(@NonNull String provider) {\n                promptEnableLocationSettings();\n\n            }\n        };\n\n        //checkLocationPermissions();\n    }\n\n    public LiveData<Double> getSpeed() {\n        return speedKmh;\n    }\n\n    public LiveData<Location> getLocation() {\n        return location;\n    }\n\n    public LiveData<Boolean> getLocationPermissionState() {\n        return locationPermissionState;\n    }\n\n    public LiveData<String> getAddress() {\n        return address;\n    }\n\n    // Actualiza la ubicación en la interfaz\n    private void updateLocation(Location location) {\n        if (location != null) {\n            long currentTime = System.currentTimeMillis();\n            if (currentTime - lastSpeedUpdate >= UPDATE_INTERVAL_MS) {\n                lastSpeedUpdate = currentTime;\n                processSpeedData(location);\n\n\n                //float currentSpeed = location.getSpeed();  // Velocidad en m/s\n                //DetectorAccidenteDataWriter.writeAccidentDataToFile(getApplication().getApplicationContext(), \"Velocidad en M/S:\" + currentSpeed);\n\n                //speedAndAccelerationHandler.handleSpeedAndAcceleration(currentSpeed, currentTime, accelerationQueueRepository);\n\n                //double speedKmhValue = currentSpeed * 3.6;  // Convertir a km/h\n                //speedKmh.setValue(speedKmhValue);\n\n                // Registrar datos de velocidad y aplicar filtro de Kalman\n                //DetectorAccidenteDataWriter.writeAccidentDataToFile(getApplication().getApplicationContext(), \"Velocidad en KM/H:\" + speedKmhValue);\n                //sensorData.addSpeedData(speedKmhValue, UPDATE_INTERVAL_MS);  // Almacenar datos\n\n                // Registrar datos de movimiento\n                //accidente.registrarNuevoDato(new DatosMovimiento(location.getLatitude(), location.getLongitude(), currentSpeed, currentTime));\n\n                // Obtener dirección desde las coordenadas\n                addressFetcher.fetchAddressFromLocation(location, address);\n\n                // Actualizar la ubicación\n                this.location.setValue(location);\n            }\n\n\n        }\n    }\n    private void processSpeedData(Location location) {\n        float currentSpeed = location.getSpeed();  // Velocidad en m/s\n        double speedKmhValue = currentSpeed * 3.6;  // Convertir a km/h\n        speedKmh.setValue(speedKmhValue);\n        sensorData.addSpeedData(speedKmhValue, UPDATE_INTERVAL_MS);  // Almacenar datos\n        if (!deteccionIniciada && speedKmhValue > UMBRAL_MIN_VEL) {\n            Log.i(\"MainActivity\", \"Velocidad mayor a 5km/h. Iniciando detección de accidentes.\");\n            Toast.makeText(getApplication().getApplicationContext(), \"Velocidad mayor a 5 km/h. Iniciando detección de accidentes.\", Toast.LENGTH_LONG).show();\n\n            deteccionIniciada = true;  // Marcamos que ya hemos iniciado la detección\n            accidente.registrarNuevoDato(new DatosMovimiento(location.getLatitude(), location.getLongitude(), speedKmhValue, System.currentTimeMillis()));\n        }else if (deteccionIniciada){\n            accidente.registrarNuevoDato(new DatosMovimiento(location.getLatitude(), location.getLongitude(), speedKmhValue, System.currentTimeMillis()));\n\n        }else{\n            Log.i(\"MainActivity\", \"Velocidad menor a 5km/h. Esperando para iniciar la detección.\");\n            Toast.makeText(getApplication().getApplicationContext(), \"Velocidad menor a 5 km/h. Esperando para iniciar la detección.\", Toast.LENGTH_LONG).show();\n\n\n        }\n//csvHelper.saveDataToCsv(speedKmhValue,location.getLatitude(),location.getLongitude(),0,false,false,false);\n        // csvHelper.saveDataToCsv(speedKmhValue,location.getLatitude(),location.getLongitude(),address.getValue());\n\n    }\n\n//    private void updateLocation(Location location) {\n//        long currentTime = System.currentTimeMillis();\n//\n//        if (currentTime - lastSpeedUpdate >= UPDATE_INTERVAL_MS) {\n//            lastSpeedUpdate = currentTime;\n//\n//            float currentSpeed = location.getSpeed();  // Velocidad en m/s\n//            DetectorAccidenteDataWriter.writeAccidentDataToFile(getApplication().getApplicationContext(),\"Velocidad en M/S:\"+ currentSpeed);\n//            if (isFirstMeasurement) {\n//                isFirstMeasurement = false;\n//                previousSpeed = currentSpeed;\n//                previousTime = currentTime;\n//            }\n//            else{\n//                float acceleration = (currentSpeed - previousSpeed) / (currentTime - previousTime);\n//                accelerationQueueRepository.addAccelerationData(acceleration);\n//                AccelerationDataWriter.writeAcceleration(getApplication().getApplicationContext(),\"Aceleracion dada por VF=\"+ currentSpeed+\", VI=\"+ previousSpeed+ \"/ TF=\"+currentTime+\", TI=\"+previousTime);\n//                previousSpeed = currentSpeed;\n//                previousTime = currentTime;\n//            }\n//\n//            KalmanFilter kalmanFilter = new KalmanFilter(0.1, 0.1); // Configura los parámetros de ruido\n//\n//\n//            double speedKmhValue = currentSpeed * 3.6;  // Convertir a km/h\n//            speedKmh.setValue(speedKmhValue);\n//            this.location.setValue(location);\n//            double smoothedSpeed = kalmanFilter.update(speedKmhValue);\n//\n//\n//            DetectorAccidenteDataWriter.writeAccidentDataToFile(getApplication().getApplicationContext(),\"Velocidad en KM/H:\"+ speedKmhValue );\n//\n//            //DetectorAccidenteDataWriter.writeAccidentDataToFile(getApplication().getApplicationContext(),\"Velocidad en KM/H CON KALMAN:\"+ smoothedSpeed );\n//\n//            sensorData.addSpeedData(speedKmhValue,UPDATE_INTERVAL_MS);  // Almacenar datos\n//\n//\n//            accidente.registrarNuevoDato(new DatosMovimiento(location.getLatitude(),location.getLongitude(),currentSpeed,currentTime));\n//\n//\n//\n//\n//            // Obtener la dirección a partir de las coordenadas\n//            Geocoder geocoder = new Geocoder(getApplication(), Locale.getDefault());\n//            try {\n//                List<Address> addresses = geocoder.getFromLocation(location.getLatitude(), location.getLongitude(), 1);\n//                if (addresses != null && !addresses.isEmpty()) {\n//                    String addressString = addresses.get(0).getAddressLine(0);  // Dirección completa\n//                    address.setValue(addressString);  // Actualizar la dirección\n//                } else {\n//                    address.setValue(\"Dirección no encontrada\");\n//                }\n//            } catch (IOException e) {\n//                e.printStackTrace();\n//                address.setValue(\"Error al obtener la dirección\");\n//            }\n//\n//        }\n//    }\n\n//    public void checkLocationPermissions() {\n//        if (ActivityCompat.checkSelfPermission(getApplication(), Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED\n//                && ActivityCompat.checkSelfPermission(getApplication(), Manifest.permission.ACCESS_COARSE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n//            locationPermissionState.setValue(false);\n//        } else {\n//            locationPermissionState.setValue(true);\n//            resumeLocationUpdates();\n//        }\n//    }\n\n    // Verifica permisos de ubicación\n    public void checkLocationPermissions() {\n        Log.i(\"SpeedViewModel\", \"Checking location permissions\");\n        if (ActivityCompat.checkSelfPermission(getApplication(), Manifest.permission.ACCESS_FINE_LOCATION)\n                != PackageManager.PERMISSION_GRANTED) {\n            locationPermissionState.setValue(false);\n        } else {\n            locationPermissionState.setValue(true);\n            checkLocationSettings(getApplication().getApplicationContext());\n        }\n    }\n\n//    // Solicita permisos de ubicación\n//    public void requestLocationPermissions(Context context) {\n//        ActivityCompat.requestPermissions((MainActivity) context,\n//                new String[]{Manifest.permission.ACCESS_FINE_LOCATION},\n//                REQUEST_LOCATION_PERMISSION);\n//\n//    }\n\n    public void checkLocationSettings(Context context) {\n        Log.i(\"SpeedViewModel\", \"Permissions granted, checking location settings\");\n\n        LocationRequest locationRequest = new LocationRequest.Builder(Priority.PRIORITY_HIGH_ACCURACY, UPDATE_INTERVAL_MS)\n                .setIntervalMillis(UPDATE_INTERVAL_MS)\n                .setMinUpdateIntervalMillis(UPDATE_INTERVAL_MS / 2)\n                .build();\n\n\n\n        LocationSettingsRequest.Builder builder = new LocationSettingsRequest.Builder().addLocationRequest(locationRequest);\n\n\n        Task<LocationSettingsResponse> task = LocationServices.getSettingsClient(context)\n                .checkLocationSettings(builder.build());\n\n        //resumeLocationUpdates();\n\n\n        task.addOnSuccessListener(locationSettingsResponse -> {\n            Log.i(\"SpeedViewModel\", \"Location settings are satisfied.\");\n            resumeLocationUpdates(); // Llama a resumeLocationUpdates solo si la ubicación está activada\n        });\n        //task.addOnSuccessListener(locationSettingsResponse -> resumeLocationUpdates());\n\n\n        task.addOnFailureListener(e -> {\n            if (e instanceof ResolvableApiException) {\n                ResolvableApiException resolvable = (ResolvableApiException) e;\n                try {\n                    resolvable.startResolutionForResult((MainActivity) context, REQUEST_CHECK_SETTINGS);\n                    Log.i(\"SpeedViewModel\", \"?????\");\n\n                } catch (Exception ex) {\n                    ex.printStackTrace();\n                }\n            }\n        });\n    }\n//    public void checkLocationSettings(Context context) {\n//        if (ActivityCompat.checkSelfPermission(context, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {\n//            ActivityCompat.requestPermissions((Activity) context, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, REQUEST_LOCATION_PERMISSION);\n//            return;\n//        }\n//\n//        LocationManager locationManager = (LocationManager) context.getSystemService(Context.LOCATION_SERVICE);\n//        boolean isGpsEnabled = locationManager.isProviderEnabled(LocationManager.GPS_PROVIDER);\n//        boolean isNetworkEnabled = locationManager.isProviderEnabled(LocationManager.NETWORK_PROVIDER);\n//\n//        if (isGpsEnabled || isNetworkEnabled) {\n//            resumeLocationUpdates();\n//        } else {\n//            showEnableLocationDialog(context);\n//        }\n//    }\n//\n//    private void showEnableLocationDialog(Context context) {\n//        new AlertDialog.Builder(context)\n//                .setTitle(\"Activar Ubicación\")\n//                .setMessage(\"Por favor, activa la ubicación y la precisión alta en la configuración.\")\n//                .setPositiveButton(\"Ir a Configuración\", (dialog, which) -> {\n//                    Intent intent = new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS);\n//                    context.startActivity(intent);\n//                })\n//                .setNegativeButton(\"Cancelar\", (dialog, which) -> dialog.dismiss())\n//                .setOnDismissListener(dialog -> {\n//                    // Aquí puedes verificar nuevamente si la ubicación está habilitada\n//                    checkLocationSettings(context);\n//                })\n//                .show();\n//    }\n\n\n    // Inicia las actualizaciones de ubicación\n    public void resumeLocationUpdates() {\n        Log.i(\"SpeedViewModel\", \"Location settings are OK, resuming location updates\");\n\n        if (ActivityCompat.checkSelfPermission(getApplication(), Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, UPDATE_INTERVAL_MS, 0, locationListener);\n        }\n    }\n\n    //    // Pausa las actualizaciones de ubicación\n//    public void pauseLocationUpdates() {\n//        if (ActivityCompat.checkSelfPermission(getApplication(), Manifest.permission.ACCESS_FINE_LOCATION) == PackageManager.PERMISSION_GRANTED) {\n//            locationManager.removeUpdates(locationListener);\n//        }\n//    }\n    // Muestra diálogo para habilitar los ajustes de ubicación si están deshabilitados\n    private void promptEnableLocationSettings() {\n        checkLocationSettings(getApplication().getApplicationContext());\n    }\n//    // Maneja el resultado de la solicitud de permisos\n//    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {\n//        if (requestCode == REQUEST_LOCATION_PERMISSION && grantResults.length > 0\n//                && grantResults[0] == PackageManager.PERMISSION_GRANTED) {\n//            checkLocationSettings(getApplication().getApplicationContext());\n//        }\n//    }\n\n    // Maneja el resultado de la solicitud de activación de ubicación\n//    public void onActivityResult(int requestCode, int resultCode) {\n//        if (requestCode == REQUEST_CHECK_SETTINGS) {\n//            if (resultCode == MainActivity.RESULT_OK) {\n//                checkLocationSettings(getApplication().getApplicationContext());\n//                // La ubicación ahora está habilitada, comienza a recibir actualizaciones\n//            } else {\n//                // La ubicación no se activó, puedes manejar esto como desees\n//                Log.e(\"LocationSettingsError\", \"El usuario no habilitó la ubicación.\");\n//            }\n//        }\n\n//    public void onActivityResult(int requestCode, int resultCode) {\n//        if (requestCode == REQUEST_CHECK_SETTINGS && resultCode == MainActivity.RESULT_OK) {\n//            resumeLocationUpdates();\n//            //checkLocationSettings(getApplication().getApplicationContext());\n//        }\n//\n//    }\n}
===================================================================
diff --git a/app/src/main/java/com/example/autoalert/viewmodel/SpeedViewModel.java b/app/src/main/java/com/example/autoalert/viewmodel/SpeedViewModel.java
--- a/app/src/main/java/com/example/autoalert/viewmodel/SpeedViewModel.java	
+++ b/app/src/main/java/com/example/autoalert/viewmodel/SpeedViewModel.java	
@@ -54,7 +54,7 @@
     private static final int REQUEST_LOCATION_PERMISSION = 1001;
     public static final int REQUEST_CHECK_SETTINGS = 1002;
     private static int MAX_SIZE_COORD = 3;
-    private static int UMBRAL_MIN_VEL=5;
+    private static int UMBRAL_MIN_VEL=-1;
 
     private MutableLiveData<Double> speedKmh = new MutableLiveData<>();
     private MutableLiveData<Location> location = new MutableLiveData<>();
