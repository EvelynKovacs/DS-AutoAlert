Index: app/src/main/java/com/example/autoalert/utils/DetectorAccidenteLateral.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.autoalert.utils;\n\nimport static android.content.ContentValues.TAG;\nimport static com.example.autoalert.utils.AutoParado.elAutoEstaParado;\nimport static com.example.autoalert.utils.CalcularAngulo.calcularAngulo;\nimport static com.example.autoalert.utils.CambioBrusco.esCambioBrusco;\nimport static com.example.autoalert.utils.DesaceleracionBrusca.esDesaceleracionBrusca;\n\nimport android.content.Context;\nimport android.util.Log;\n\nimport com.example.autoalert.model.entities.DatosMovimiento;\nimport com.example.autoalert.repository.DetectorAccidenteDataWriter;\n\nimport org.junit.runner.RunWith;\nimport org.robolectric.RobolectricTestRunner;\nimport org.robolectric.annotation.Config;\n\nimport java.util.LinkedList;\n\npublic class DetectorAccidenteLateral {\n\n\n    private static final double UMBRAL_AUTO_PARADO = 5;\n    private LinkedList<DatosMovimiento> historialDatos = new LinkedList<>();\n    private static final double UMBRAL_CAMBIO_ANGULO = 70;  // Grados\n    private static final double UMBRAL_DESACELERACION = 5.0;  // metros/seg^2\n    private boolean cambioBruscoDetectado=false;\n\n\n    private Context context; // Agregar contexto para el archivo\n\n    public DetectorAccidenteLateral(Context context) {\n        this.context = context.getApplicationContext(); // Usar el contexto de aplicación para evitar fugas\n\n\n    }\n\n\n    public boolean registrarNuevoDato(DatosMovimiento nuevoDato) {\n        historialDatos.add(nuevoDato);\n        if (historialDatos.size() > 3) {\n            historialDatos.removeFirst();  // Mantén solo los últimos 3 datos\n        }\n\n        if (!cambioBruscoDetectado && historialDatos.size() == 3) {\n            if (analizarCondicionesPrevias()) {\n                cambioBruscoDetectado = true;\n                historialDatos.clear();\n                Log.i(TAG, \"Condiciones previas cumplidas. Recolectando 3 nuevos datos...\");\n                return false; // Aún no es accidente, pero se cumple la primera condición\n            }\n        }\n\n        if (cambioBruscoDetectado && historialDatos.size() == 3) {\n            if (analizarMovimientoPosterior()) {\n                Log.i(TAG, \"Posible accidente lateral detectado.\");\n                DetectorAccidenteDataWriter.writeAccidentDataToFile(context, \"ACCIDENTEEEEEEEEEEEEEEEEEEEEE LATERALLLLLLLLLLLLLLLLLLLL detectado.\");\n                cambioBruscoDetectado = false;\n                return true;  // Accidente detectado\n            } else {\n                Log.i(TAG, \"No se detecta accidente.\");\n            }\n            cambioBruscoDetectado = false;\n        }\n\n        return false;  // Por defecto, no se detecta accidente\n    }\n\n\n\n    private boolean analizarCondicionesPrevias() {\n        DatosMovimiento punto1 = historialDatos.get(0);\n        DatosMovimiento punto2 = historialDatos.get(1);\n        DatosMovimiento punto3 = historialDatos.get(2);\n\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"Punto 1: (\"+punto1.getLatitud()+\",\"+punto1.getLongitud()+\")\");\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"Punto 2: (\"+punto2.getLatitud()+\",\"+punto2.getLongitud()+\")\");\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"Punto 3: (\"+punto3.getLatitud()+\",\"+punto3.getLongitud()+\")\");\n\n\n        double angulo = calcularAngulo(punto1, punto2, punto3);\n        Log.i(TAG,\"ANGULO : \"+ angulo+ \" punto1=\"+ punto1.getLatitud()+\",\"+punto1.getLongitud()+\" punto2=\"+ punto2.getLatitud()+\",\"+punto2.getLongitud()+\" punto3=\"+ punto3.getLatitud()+\",\"+punto3.getLongitud());\n\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"ANGULO: \"+ angulo);\n        boolean cambioBrusco = esCambioBrusco(angulo, UMBRAL_CAMBIO_ANGULO);\n        Log.i(TAG,\"CAMBIO BRUSCO : \"+ cambioBrusco);\n\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"CAMBIO BRUSCO: \"+ cambioBrusco);\n\n        boolean desaceleracionBrusca = esDesaceleracionBrusca(punto2, punto3, UMBRAL_DESACELERACION);\n        Log.i(TAG,\"DESACELERACION BRUSCA : \"+ desaceleracionBrusca);\n\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"DESACELERACION BRUSCA: \"+ desaceleracionBrusca);\n\n        boolean autoParado = elAutoEstaParado(punto1, punto2, punto3, UMBRAL_AUTO_PARADO);\n        Log.i(TAG,\"AUTO PARADO : \"+ autoParado);\n\n        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,\"PARADO: \"+ desaceleracionBrusca);\n\n\n\n        if (cambioBrusco && (desaceleracionBrusca || autoParado)) {\n            System.out.println(\"Cambio brusco y desaceleración brusca o auto parado detectados.\");\n            Log.i(TAG,\"Cambio brusco y desaceleración brusca o auto parado detectados \");\n\n            DetectorAccidenteDataWriter.writeAccidentDataToFile(context, \"Se cumplen todas las condiciones previas.\");\n            return true;\n        }\n\n        return false;\n    }\n\n\n\n    private boolean analizarMovimientoPosterior() {\n        DatosMovimiento punto4 = historialDatos.get(0);\n        DatosMovimiento punto5 = historialDatos.get(1);\n        DatosMovimiento punto6 = historialDatos.get(2);\n\n        boolean resultado = evaluarMovimientoPosterior(punto4, punto5, punto6, UMBRAL_DESACELERACION);\n\n        if (resultado) {\n            return true; // Se detectó accidente en los datos posteriores\n        }\n\n        return false; // No se detectó accidente, seguimos recolectando datos\n    }\n\n    private boolean evaluarMovimientoPosterior(DatosMovimiento punto4, DatosMovimiento punto5, DatosMovimiento punto6, double umbralDesaceleracion) {\n//        if (punto6.getVelocidad() > punto5.getVelocidad() && punto5.getVelocidad() > punto4.getVelocidad()) {\n//            return \"El auto siguió en movimiento.\";\n//        }\n\n//        if (punto4.getVelocidad() > punto5.getVelocidad() && punto5.getVelocidad() > punto6.getVelocidad()) {\n//            double desaceleracionProgresiva = calcularDesaceleracion(punto4, punto5, punto6);\n//            if (desaceleracionProgresiva < umbralDesaceleracion) {\n//                return \"El auto desaceleró de manera progresiva.\";\n//            }\n//        }\n\n        if (esDesaceleracionBrusca(punto4, punto5, umbralDesaceleracion) || elAutoEstaParado(punto4, punto5, punto6, UMBRAL_AUTO_PARADO)) {\n            return true;\n        }\n\n        return false;\n    }\n\n\n\n}\n\n
===================================================================
diff --git a/app/src/main/java/com/example/autoalert/utils/DetectorAccidenteLateral.java b/app/src/main/java/com/example/autoalert/utils/DetectorAccidenteLateral.java
--- a/app/src/main/java/com/example/autoalert/utils/DetectorAccidenteLateral.java	
+++ b/app/src/main/java/com/example/autoalert/utils/DetectorAccidenteLateral.java	
@@ -96,7 +96,7 @@
         boolean autoParado = elAutoEstaParado(punto1, punto2, punto3, UMBRAL_AUTO_PARADO);
         Log.i(TAG,"AUTO PARADO : "+ autoParado);
 
-        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,"PARADO: "+ desaceleracionBrusca);
+        DetectorAccidenteDataWriter.writeAccidentDataToFile(context,"PARADO: "+ autoParado);
 
 
 
